@using OpenHabitTracker.App
@using OpenHabitTracker.Data
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject CalendarService CalendarService
@inject HabitService HabitService
@inject ClientState ClientState
@inject IStringLocalizer Loc

@if (Habit is null || Habit.TimesDoneByDay is null)
{
    @* <p>Failed to load. Try refreshing.</p> *@
}
else
{
    if (DisplayMonth)
    {
        <div class="input-group mb-1">
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToPreviousWeek"><i class="bi bi-chevron-double-up"></i></button>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToPreviousMonth(ClientState.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-left"></i></button>
            <span class="input-group-text flex-grow-1" style="justify-content: center;">@_calendarParams.FirstDayOfMonth.ToString("MMMM")</span>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToNextMonth(ClientState.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-right"></i></button>
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToNextWeek"><i class="bi bi-chevron-double-down"></i></button>
        </div>

        <div class="bg-body d-flex">
            @for (int i = 0; i < 7; i++)
            {
                int dayIdx = CalendarService.GetDayOfWeek(ClientState.Settings.FirstDayOfWeek, i);
                string day = Loc[_days[dayIdx]];
                <div @key="day" class="border d-flex" style="align-items: center; justify-content: center; height: 50px; width: 50px">@day</div>
            }
        </div>
    }

    @for (int row = 0; row < rowCount; row++)
    {
        <div class="d-flex">
            @for (int day = 0; day < daysInRow; day++)
            {
                DateTime dateTime = CalendarService.GetCalendarDay(_calendarParams.CalendarStart, row * daysInRow + day); // if not captured locally, day becomes the last value used in the loop

                string text = dateTime.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday ? "text-warning" : "text-secondary";
                if (dateTime.Month == _calendarParams.FirstDayOfMonth.Month)
                    text += "-emphasis";
                string border = dateTime == selectedDateTime ? "border-4 border-success-subtle" : dateTime.Date == DateTime.Today ? "border-4 border-primary-subtle" : "";
                string background = "bg-body-tertiary";
                string timesDone = "";
                List<TimeModel>? list = null;

                if (Habit.TimesDoneByDay.TryGetValue(dateTime, out list) && list.Count > 0)
                {
                    if (list.Count > 1)
                        timesDone = $"({list.Count})";

                    if ((Habit.RepeatPeriod == Period.Day && list.Count >= Habit.RepeatCount) || (Habit.RepeatPeriod != Period.Day && Habit.RepeatCountReached(dateTime)))
                        background = "bg-success-subtle";
                    else
                        background = "bg-warning-subtle";
                }

                <button class="@($"border {border} {text} d-flex {background}")"
                        style="align-items: center; justify-content: center; height: 50px; width: 50px; line-height: normal; flex-direction: column;"
                        @onclick="() => DayClicked(dateTime, list)">
                    @dateTime.Day<small>@timesDone</small>
                </button>
            }
        </div>
    }

    if (selectedDateTime is not null)
    {
        <div class="input-group mt-1">
            <button class="btn btn-outline-primary" @onclick="RemoveFromSelectedDay"><i class="bi bi-dash"></i></button>
            <span class="input-group-text flex-grow-1" style="justify-content: center;">@(selectedTimeList?.Count ?? 0)</span>
            <button class="btn btn-outline-primary" @onclick="AddToSelectedDay"><i class="bi bi-plus"></i></button>
        </div>

        if (DisplayTimeList && selectedTimeList is not null)
        {
            foreach (TimeModel time in selectedTimeList)
            {
                <div class="input-group">
                    <span class="input-group-text">@Loc["From"]</span>
                    <InputDate class="form-control" Type="InputDateType.Time" Value="time.StartedAt" ValueExpression="() => time.StartedAt" ValueChanged="(DateTime startedAt) => UpdateStartedAt(time, startedAt)" />
                    <span class="input-group-text">@Loc["to"]</span>
                    <InputDate class="form-control" Type="InputDateType.Time" Value="time.CompletedAt" ValueExpression="() => time.CompletedAt" ValueChanged="(DateTime? completedAt) => UpdateCompletedAt(time, completedAt)" />
                    <button class="btn btn-outline-primary" @onclick="() => RemoveTimeDone(time)"><i class="bi bi-trash"></i></button>
                </div>
            }
        }
    }
}

@code {
    [EditorRequired]
    [Parameter]
    public HabitModel? Habit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<HabitModel?> HabitChanged { get; set; }

    [Parameter]
    public bool DisplayMonth { get; set; }

    [Parameter]
    public bool DisplayBasedOnWidth { get; set; }

    [Parameter]
    public bool DisplayTimeList { get; set; }

    int rowCount = 0;
    int daysInRow = 0;

    [Parameter]
    public int ColumnWidth { get; set; }

    int _currentColumnWidth;

    CalendarParams _calendarParams = new();

    private readonly string[] _days = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };

    protected override async Task OnParametersSetAsync()
    {
        if (_calendarParams.CalendarStart == DateTime.MinValue || _calendarParams.CalendarStart.DayOfWeek != ClientState.Settings.FirstDayOfWeek)
        {
            if (DisplayMonth)
            {
                rowCount = 6;
                daysInRow = 7;
                _calendarParams.SetCalendarStartByFirstDayOfMonth(ClientState.Settings.FirstDayOfWeek, DateTime.Today);
            }
        }

        if (ColumnWidth != 0 && (_currentColumnWidth != ColumnWidth || rowCount == 0))
        {
            _currentColumnWidth = ColumnWidth;

            if (DisplayBasedOnWidth)
            {
                rowCount = 1;
                daysInRow = (ColumnWidth-350) / 50;
                _calendarParams.SetCalendarStartByDaysFromToday(-daysInRow + 1);
            }
            else
            {
                rowCount = 1;
                daysInRow = ColumnWidth / 50;
                _calendarParams.SetCalendarStartByDaysFromToday(-daysInRow + 1);
                //_calendarParams.SetCalendarStartByFirstDayOfWeek(ClientState.Settings.FirstDayOfWeek, DateTime.Today);
            }
        }

        if (Habit is not null)
        {
            if (Habit.TimesDoneByDay is null)
                await HabitService.LoadTimesDone(Habit);

            if (Habit.TimesDoneByDay is not null && selectedDateTime.HasValue)
            {
                if (!Habit.TimesDoneByDay.TryGetValue(selectedDateTime.Value, out selectedTimeList))
                    selectedDateTime = null;
            }
        }
    }

    DateTime? selectedDateTime;
    List<TimeModel>? selectedTimeList;

    async Task RemoveFromSelectedDay()
    {
        await RemoveTimeDone(selectedTimeList);
    }

    async Task AddToSelectedDay()
    {
        await AddTimeDone(selectedDateTime!.Value);

        if (selectedTimeList is null)
            Habit!.TimesDoneByDay!.TryGetValue(selectedDateTime!.Value, out selectedTimeList);
    }

    async Task DayClicked(DateTime dateTime, List<TimeModel>? timeList)
    {
        if (DisplayMonth)
        {
            if (selectedDateTime == dateTime)
            {
                selectedDateTime = null;
            }
            else
            {
                selectedDateTime = dateTime;
                selectedTimeList = timeList;
            }
        }
        else
        {
            await AddTimeDone(dateTime);
        }
    }

    async Task AddTimeDone(DateTime dateTime)
    {
        if (dateTime > DateTime.Now)
            return;

        if (dateTime.Date == DateTime.Today)
            dateTime = DateTime.Now;
        else if (dateTime.TimeOfDay == TimeSpan.Zero)
            dateTime = dateTime.AddHours(12);

        await HabitService.AddTimeDone(Habit!, dateTime);

        await HabitChanged.InvokeAsync(Habit);
    }

    async Task RemoveTimeDone(List<TimeModel>? timeList)
    {
        if (timeList is null || timeList.Count == 0)
            return;

        await HabitService.RemoveTimeDone(Habit!, timeList.Last());

        await HabitChanged.InvokeAsync(Habit);
    }

    async Task RemoveTimeDone(TimeModel time)
    {
        await HabitService.RemoveTimeDone(Habit!, time);

        await HabitChanged.InvokeAsync(Habit);
    }

    async Task UpdateStartedAt(TimeModel time, DateTime startedAt)
    {
        if (startedAt <= time.CompletedAt)
        {
            time.StartedAt = startedAt;

            await HabitService.UpdateTimeDone(Habit!, time);

            await HabitChanged.InvokeAsync(Habit);
        }
    }

    async Task UpdateCompletedAt(TimeModel time, DateTime? completedAt)
    {
        if (completedAt >= time.StartedAt)
        {
            time.CompletedAt = completedAt;

            await HabitService.UpdateTimeDone(Habit!, time);

            await HabitChanged.InvokeAsync(Habit);
        }
    }
}

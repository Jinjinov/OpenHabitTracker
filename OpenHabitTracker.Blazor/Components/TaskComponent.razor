@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@implements IDisposable

@inject TaskService TaskService
@inject ClientState ClientState
@inject IStringLocalizer Loc
@inject IGTourService GTourService

<div class="input-group flex-nowrap" data-tasks-step-3>
    <PriorityComponent Model="Task" />
    <InputText class="form-control" Value="@Task.Title" ValueExpression="() => Task.Title" ValueChanged="(string title) => SaveTitle(Task, title)" />
    <button class="@($"btn {(Task.CompletedAt is null ? "btn-outline-primary" : "btn-primary")}")" @onclick="() => TaskService.MarkAsDone(Task)"><i class="bi bi-check-square"></i></button>
    <button class="btn btn-outline-primary" @onclick="async () => { await TaskService.DeleteTask(Task); await CloseSelected.InvokeAsync(); await ContentDeleted.InvokeAsync(); }"><i class="bi bi-trash"></i></button>
    <button class="btn btn-outline-primary" @onclick="async () => await CloseSelected.InvokeAsync()"><i class="bi bi-x-square"></i></button>
</div>

<div data-tasks-step-4>
    <ItemsComponent Items=Task />
</div>

<div class="input-group">
    <span class="input-group-text col-4">@Loc["Planned at"]</span>
    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="Task.PlannedAt" ValueExpression="() => Task.PlannedAt" ValueChanged="(DateTime? plannedAt) => SavePlannedAt(Task, plannedAt)" />
</div>

<div class="input-group">
    <span class="input-group-text">@Loc["Duration"]</span>

    <InputSelect class="form-select" Value="Task.DurationHour" ValueExpression="() => Task.DurationHour" TValue="int" ValueChanged="(int hour) => SaveDuration(Task, hour, Task.DurationMinute)">
        @for (int i = 0; i <= 23; i++)
        {
            <option value="@i">@i</option>
        }
    </InputSelect>
    <span class="input-group-text">h</span>

    <InputSelect class="form-select" Value="Task.DurationMinute" ValueExpression="() => Task.DurationMinute" TValue="int" ValueChanged="(int minute) => SaveDuration(Task, Task.DurationHour, minute)">
        @for (int i = 0; i <= 59; i++)
        {
            <option value="@i">@i</option>
        }
    </InputSelect>
    <span class="input-group-text">min</span>
</div>

@if (Task.CompletedAt is null)
{
<div class="input-group flex-nowrap">
    @if (_timer is null)
    {
        <span class="input-group-text flex-grow-1">@Loc["Start timer"]</span>
        <button class="btn btn-outline-primary" @onclick="StartTimer"><i class="bi bi-play"></i></button>
    }
    else
    {
        <span class="input-group-text flex-grow-1">@_elapsedTime.ToString(@"hh\:mm\:ss")</span>
        <button class="btn btn-outline-primary" @onclick="ResetTimer"><i class="bi bi-arrow-counterclockwise"></i></button>
        if (_isPaused)
        {
            <button class="btn btn-outline-primary" @onclick="ResumeTimer"><i class="bi bi-play"></i></button>
        }
        else
        {
            <button class="btn btn-outline-primary" @onclick="PauseTimer"><i class="bi bi-pause"></i></button>
        }
        <button class="btn btn-outline-primary" @onclick="StopTimer"><i class="bi bi-stop"></i></button>
    }
</div>
}

@if (_timer is null && Task.StartedAt is not null && Task.CompletedAt is not null)
{
    @if (Task.StartedAt != Task.CompletedAt && Task.TimeSpent is TimeSpan timeSpent)
    {
        <div class="p-1 border rounded-0">
            <div>@Loc["Time spent"]: @(timeSpent.Days > 0 ? $"{timeSpent.Days}.{timeSpent:hh\\:mm\\:ss}" : timeSpent.ToString(@"hh\:mm\:ss"))</div>
        </div>
    }

    <div class="input-group">
        <span class="input-group-text col-4">@Loc["Started"]</span>
        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="Task.StartedAt" ValueExpression="() => Task.StartedAt" ValueChanged="(DateTime? startedAt) => SaveStartedAt(Task, startedAt)" />
    </div>

    <div class="input-group">
        <span class="input-group-text col-4">@Loc["Completed"]</span>
        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="Task.CompletedAt" ValueExpression="() => Task.CompletedAt" ValueChanged="(DateTime? completedAt) => SaveCompletedAt(Task, completedAt)" />
    </div>
}

<div class="input-group flex-nowrap">
    <span class="input-group-text col-4">@Loc["Category"]</span>
    <CategoryComponent Model="Task" />
</div>

@if (ClientState.Settings.ShowColor)
{
    <div class="input-group flex-nowrap">
        <span class="input-group-text col-4">@Loc["Color"]</span>
        <ColorComponent Model="Task" />
    </div>
}

@if (ClientState.Settings.ShowCreatedUpdated)
{
    <div class="p-1 border rounded-0">
        <small class="d-inline-block mx-1">@Loc["Created"]: @Task.CreatedAt</small>
        <small class="d-inline-block mx-1">@Loc["Updated"]: @Task.UpdatedAt</small>
    </div>
}

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="task" TourSteps="tourSteps" />
}

@code {
    TourStep[] tourSteps =
    {
    };

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    [EditorRequired]
    [Parameter]
    public TaskModel Task { get; set; } = null!;

    [Parameter]
    public EventCallback CloseSelected { get; set; }

    [CascadingParameter(Name = "ContentDeleted")]
    public EventCallback ContentDeleted { get; set; }

    PeriodicTimer? _timer;
    DateTime _taskStartedTime;
    TimeSpan _elapsedTime;
    TimeSpan _previouslyElapsedTime;
    bool _isPaused;

    async Task StartTimer()
    {
        if (Task is null)
            return;

        TimeSpan? duration = Task.Duration?.ToTimeSpan();

        await TaskService.Start(Task);

        ResetTimer();

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        while (_timer is not null && await _timer.WaitForNextTickAsync())
        {
            if (!_isPaused)
            {
                _elapsedTime = DateTime.Now - _taskStartedTime;

                if (duration is not null && _elapsedTime >= duration)
                {
                    await StopTimer();
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    void ResetTimer()
    {
        _elapsedTime = TimeSpan.Zero;
        _previouslyElapsedTime = TimeSpan.Zero;

        ResumeTimer();
    }

    void PauseTimer()
    {
        _previouslyElapsedTime = _elapsedTime;
        _isPaused = true;
    }

    void ResumeTimer()
    {
        _taskStartedTime = DateTime.Now - _previouslyElapsedTime;
        _isPaused = false;
    }

    async Task StopTimer()
    {
        if (Task is null || _timer is null)
            return;

        if (_isPaused)
            ResumeTimer();

        await TaskService.SetStartTime(Task, _taskStartedTime);

        await TaskService.MarkAsDone(Task);

        _timer.Dispose();
        _timer = null;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    async Task SaveTitle(TaskModel task, string title)
    {
        task.Title = title;

        await TaskService.UpdateTask();
    }

    async Task SavePlannedAt(TaskModel task, DateTime? plannedAt)
    {
        task.PlannedAt = plannedAt;

        await TaskService.UpdateTask();
    }

    async Task SaveStartedAt(TaskModel task, DateTime? startedAt)
    {
        if (startedAt <= task.CompletedAt)
        {
            task.StartedAt = startedAt;

            await TaskService.UpdateTask();
        }
    }

    async Task SaveCompletedAt(TaskModel task, DateTime? completedAt)
    {
        if (completedAt >= task.StartedAt)
        {
            task.CompletedAt = completedAt;

            await TaskService.UpdateTask();
        }
    }

    async Task SaveDuration(TaskModel task, int hour, int minute)
    {
        task.DurationProxy = new TimeOnly(hour, minute);

        await TaskService.UpdateTask();
    }
}

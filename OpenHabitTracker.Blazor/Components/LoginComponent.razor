@* @page "/login" *@

@using OpenHabitTracker.App
@using OpenHabitTracker.Blazor.Web.ApiClient
@using OpenHabitTracker.Data
@using OpenHabitTracker.Data.Entities
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Dto
@using OpenHabitTracker.Services
@using System.Net.Http.Headers

@inject ApiClientOptions ApiClientOptions
@inject AuthClient AuthClient
@inject DataAccessClient DataAccessClient
@inject ClientState ClientState
@inject SettingsService SettingsService
@inject IStringLocalizer Loc

<small class="m-1"><i class="bi bi-globe"></i> @Loc["Online sync"]</small>

<input class="form-control my-1" @bind="address" placeholder="@Loc["Address"]" />
<input class="form-control my-1" @bind="username" placeholder="@Loc["Username"]" />
<input class="form-control my-1" @bind="password" placeholder="@Loc["Password"]" type="password" />

<div class="form-check position-relative my-1">
    <InputCheckbox id="RememberMe" class="form-check-input me-1" Value="_settings.RememberMe" ValueExpression="() => _settings.RememberMe" ValueChanged="SaveRememberMe" />
    <label for="RememberMe" class="form-check-label stretched-link">@Loc["Remember me"]</label>
</div>

@if (ClientState.DataLocation == DataLocation.Local)
{
    <button class="btn btn-primary w-100 my-1" @onclick="LoginAndGetToken">@Loc["Log in"]</button>
}
@if (ClientState.DataLocation == DataLocation.Remote)
{
    <button class="btn btn-primary w-100 my-1" @onclick="Logout">@Loc["Log out"]</button>
}

@if (!string.IsNullOrEmpty(login))
{
    <p>@login</p>
}

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    SettingsModel _settings => SettingsService.Settings;

    private string address = "https://app.openhabittracker.net";
    private string username = "";
    private string password = "";
    private string login = "";

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    private async Task LoginAndGetToken()
    {
        ApiClientOptions.BaseUrl = address;

        try
        {
            LoginCredentials credentials = new() { Username = username, Password = password };

            TokenResponse tokenResponse = await AuthClient.GetJwtTokenAsync(credentials);

            if (!string.IsNullOrEmpty(tokenResponse.JwtToken))
            {
                ApiClientOptions.BearerToken = tokenResponse.JwtToken;

                if (_settings.RememberMe)
                {
                    _settings.BaseUrl = ApiClientOptions.BaseUrl;
                    _settings.RefreshToken = tokenResponse.RefreshToken;
                    await SettingsService.UpdateSettings();
                }

                UserEntity user = await AuthClient.GetCurrentUserAsync();

                login = $"{Loc["User"]}: {user.Email}";

                await ClientState.SetDataLocation(DataLocation.Remote);

                await OnStateChanged();
            }
        }
        catch (ApiException ex) when (ex.StatusCode == 401)
        {
            login = Loc["Invalid credentials"];
        }
        catch (InvalidOperationException)
        {
            login = Loc["Invalid address"];
        }
    }

    private async Task Logout()
    {
        ApiClientOptions.BearerToken = "";

        login = "";

        await ClientState.SetDataLocation(DataLocation.Local);

        await OnStateChanged();
    }

    async Task SaveRememberMe(bool rememberMe)
    {
        _settings.RememberMe = rememberMe;

        await SettingsService.UpdateSettings();
    }
}

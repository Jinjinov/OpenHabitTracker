@* @page "/login" *@

@using OpenHabitTracker.App
@using OpenHabitTracker.Blazor.Web.ApiClient
@using OpenHabitTracker.Data
@using OpenHabitTracker.Data.Entities
@using System.Net.Http.Headers

@inject ApiClientOptions ApiClientOptions
@inject AuthClient AuthClient
@inject DataAccessClient DataAccessClient
@inject ClientState ClientState

<small class="m-1"><i class="bi bi-globe"></i> Online sync</small>

<input class="form-control my-1" @bind="address" placeholder="Address" />
<input class="form-control my-1" @bind="username" placeholder="Username" />
<input class="form-control my-1" @bind="password" placeholder="Password" type="password" />

@if (ClientState.DataLocation == DataLocation.Local)
{
    <button class="btn btn-primary w-100" @onclick="LoginAndGetToken">Log in</button>
}
@if (ClientState.DataLocation == DataLocation.Remote)
{
    <button class="btn btn-primary w-100" @onclick="Logout">Log out</button>
}

@if (!string.IsNullOrEmpty(email))
{
    <p>User: @email</p>
}

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    private string address = "https://app.openhabittracker.net";
    private string username = "";
    private string password = "";
    private string email = "";

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    private async Task LoginAndGetToken()
    {
        ApiClientOptions.BaseUrl = address;

        try
        {
            LoginCredentials credentials = new() { Username = username, Password = password };

            TokenResponse tokenResponse = await AuthClient.GetTokenAsync(credentials);

            if (!string.IsNullOrEmpty(tokenResponse.Token))
            {
                ApiClientOptions.BearerToken = tokenResponse.Token;

                UserEntity user = await AuthClient.GetCurrentUserAsync();

                email = user.Email;

                await ClientState.SetDataLocation(DataLocation.Remote);

                await OnStateChanged();
            }
        }
        catch (Exception ex)
        {
            email = ex.Message;
        }
    }

    private async Task Logout()
    {
        ApiClientOptions.BearerToken = "";

        email = "";

        await ClientState.SetDataLocation(DataLocation.Local);

        await OnStateChanged();
    }
}

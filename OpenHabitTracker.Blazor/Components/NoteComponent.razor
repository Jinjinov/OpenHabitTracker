@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject NoteService NoteService
@inject JsInterop JsInterop
@inject ClientState ClientState
@inject IStringLocalizer Loc
@inject MarkdownToHtml MarkdownToHtml
@inject IGTourService GTourService

<div class="input-group flex-nowrap">
    <PriorityComponent Model="Note" />
    <InputText class="form-control" Value="@Note.Title" ValueExpression="() => Note.Title" ValueChanged="(string title) => SaveTitle(Note, title)" />
    <button class="btn btn-outline-primary" @onclick="async () => { await NoteService.DeleteNote(Note); await CloseSelected.InvokeAsync(); await ContentDeleted.InvokeAsync(); }"><i class="bi bi-trash"></i></button>
    <button class="btn btn-outline-primary" @onclick="async () => await CloseSelected.InvokeAsync()"><i class="bi bi-x-square"></i></button>
</div>

<InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" Value="@Note.Content" ValueExpression="() => Note.Content" ValueChanged="(string content) => SaveContent(Note, content)" rows="@(Note.Content.Count(c => c == '\n') + 1)" placeholder="Add note text" />

<div class="input-group flex-nowrap">
    <span class="input-group-text col-4">@Loc["Category"]</span>
    <CategoryComponent Model="Note" />
</div>

@if (ClientState.Settings.ShowColor)
{
    <div class="input-group flex-nowrap">
        <span class="input-group-text col-4">@Loc["Color"]</span>
        <ColorComponent Model="Note" />
    </div>
}

@if (ClientState.Settings.ShowCreatedUpdated)
{
    <div class="p-1 border rounded-0">
        <small class="d-inline-block mx-1">@Loc["Created"]: @Note.CreatedAt</small>
        <small class="d-inline-block mx-1">@Loc["Updated"]: @Note.UpdatedAt</small>
    </div>
}

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="Tour" TourSteps="tourSteps" />
}

@code {
    string[] tourSteps =
    {
        "Step 1",
        "Step 1",
    };

    private async Task StartTour()
    {
        await GTourService.StartTour("Tour");
    }

    [EditorRequired]
    [Parameter]
    public NoteModel Note { get; set; } = null!;

    [Parameter]
    public EventCallback CloseSelected { get; set; }

    [CascadingParameter(Name = "ContentDeleted")]
    public EventCallback ContentDeleted { get; set; }

    InputTextArea? _inputTextAreaReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_inputTextAreaReference?.Element is not null)
        {
            if (ClientState.Settings.InsertTabsInNoteContent)
                await JsInterop.HandleTabKey(_inputTextAreaReference.Element.Value);

            await JsInterop.SetCalculateAutoHeight(_inputTextAreaReference.Element.Value);
        }
    }

    async Task SaveTitle(NoteModel note, string title)
    {
        note.Title = title;

        await NoteService.UpdateNote();
    }

    async Task SaveContent(NoteModel note, string content)
    {
        note.Content = content;
        note.ContentMarkdown = MarkdownToHtml.GetMarkdown(content);

        await NoteService.UpdateNote();
    }
}

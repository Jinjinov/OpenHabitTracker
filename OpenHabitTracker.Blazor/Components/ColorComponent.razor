@using OpenHabitTracker.App
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject ClientState ClientState
@inject IStringLocalizer Loc

@if (Model is not null)
{
    <InputSelect class="@_background" Value="Model.Color" ValueExpression="() => Model.Color" TValue="string" ValueChanged="SaveColor">
        <option value="bg-transparent" class="bg-transparent">@Loc["transparent"]</option>
        <option value="bg-body" class="bg-body">@Loc["body"]</option>
        <option value="bg-body-secondary" class="bg-body-secondary">@Loc["body secondary"]</option>
        <option value="bg-body-tertiary" class="bg-body-tertiary">@Loc["body tertiary"]</option>
        <option value="bg-primary-subtle" class="bg-primary-subtle">@Loc["primary"]</option>
        <option value="bg-secondary-subtle" class="bg-secondary-subtle">@Loc["secondary"]</option>
        <option value="bg-success-subtle" class="bg-success-subtle">@Loc["success"]</option>
        <option value="bg-danger-subtle" class="bg-danger-subtle">@Loc["danger"]</option>
        <option value="bg-warning-subtle" class="bg-warning-subtle">@Loc["warning"]</option>
        <option value="bg-info-subtle" class="bg-info-subtle">@Loc["info"]</option>
        <option value="bg-light-subtle" class="bg-light-subtle">@Loc["light"]</option>
        <option value="bg-dark-subtle" class="bg-dark-subtle">@Loc["dark"]</option>
    </InputSelect>
}

@code {
    [EditorRequired]
    [Parameter]
    public ContentModel? Model { get; set; }

    string _background => Model is not null ? $"form-select {Model.Color}" : "form-select";

    async Task SaveColor(string color)
    {
        if (Model is null)
            return;

        Model.Color = color;

        await ClientState.UpdateModel(Model);
    }
}

@page "/categories"
@page "/categories/{Id:long}"

@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject CategoryService CategoryService
@inject ClientState ClientState
@inject IStringLocalizer Loc
@inject IGTourService GTourService

@* <PageTitle>OpenHabitTracker - Categories</PageTitle> *@

<div>

    <div class="my-1" data-categories-step-1>
        @if (CategoryService.NewCategory is not null)
        {
            <form @onsubmit=AddCategory>
                <div class="input-group">
                    <InputTextImmediate class="form-control" @bind-Value="CategoryService.NewCategory.Title" placeholder="@Loc["Add new category"]" />

                    <button class="btn btn-outline-primary" disabled="@string.IsNullOrWhiteSpace(CategoryService.NewCategory.Title)"><i class="bi bi-plus-square"></i></button>
                </div>
            </form>
        }
    </div>

    @if (CategoryService.Categories is null)
    {
        @* <p>Failed to load. Try refreshing.</p> *@
    }
    else
    {
        foreach (CategoryModel category in CategoryService.Categories)
        {
            <div class="input-group flex-nowrap">
                @if (category == CategoryService.SelectedCategory)
                {
                    <InputText class="form-control" @ref="inputElement" Value="@category.Title" ValueExpression="() => category.Title" ValueChanged="UpdateCategory" @onfocusout="(args) => CategoryService.SelectedCategory = null" />
                }
                else
                {
                    <button class="input-group-text flex-grow-1 text-wrap" @onclick="() => { CategoryService.SelectedCategory = category; shouldFocus = true; }">@category.Title</button>
                }
                <button class="btn btn-outline-primary" @onclick="() => DeleteCategory(category)"><i class="bi bi-trash"></i></button>
            </div>
        }
    }

</div>

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="categories" TourSteps="tourSteps" />
}

@code {
    string[] tourSteps =
    {
        "Add new category",
    };

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    InputText? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.Initialize();
    }

    protected override void OnParametersSet()
    {
        CategoryService.SetSelectedCategory(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task AddCategory()
    {
        if (CategoryService.NewCategory is not null && !string.IsNullOrWhiteSpace(CategoryService.NewCategory.Title))
        {
            await CategoryService.AddCategory();

            await OnStateChanged();
        }
    }

    async Task UpdateCategory(string title)
    {
        await CategoryService.UpdateCategory(title);

        await OnStateChanged();
    }

    async Task DeleteCategory(CategoryModel category)
    {
        await CategoryService.DeleteCategory(category);

        await OnStateChanged();
    }
}

@page "/search"

@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Data
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject ClientState ClientState
@inject CategoryService CategoryService
@inject SearchFilterService SearchFilterService
@inject IStringLocalizer Loc
@inject IGTourService GTourService

@* <PageTitle>OpenHabitTracker - Search</PageTitle> *@

<div>
    @if (CategoryService.Categories is null)
    {
        @* <p>Failed to load. Try refreshing.</p> *@
    }
    else
    {
        <div class="my-1 list-group">

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.Search)"><i class="bi bi-search"></i> @Loc["Search"]<i class="@($"bi {GetFoldIcon(QuerySection.Search)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.Search])
            {
            <div class="input-group flex-nowrap">
                <InputTextImmediate class="form-control" Value="@SearchFilterService.SearchTerm" ValueExpression="() => SearchFilterService.SearchTerm" ValueChanged="UpdateSearchTerm" placeholder="@Loc["Search..."]" @attributes="dataSearchStep1" />
                @if (SearchFilterService.MatchCase)
                {
                    <button class="btn btn-primary" @onclick="() => UpdateMatchCase(false)" data-search-step-2><i class="bi bi-type"></i></button>
                }
                else
                {
                    <button class="btn btn-outline-primary" @onclick="() => UpdateMatchCase(true)" data-search-step-2><i class="bi bi-type"></i></button>
                }
                <button class="btn btn-outline-primary" @onclick="() => UpdateSearchTerm(null)" data-search-step-3><i class="bi bi-x-square"></i></button>
            </div>
            }

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.FilterByDate)"><i class="bi bi-filter"></i> @Loc["Filter by date"]<i class="@($"bi {GetFoldIcon(QuerySection.FilterByDate)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.FilterByDate])
            {
            <div class="input-group flex-nowrap">
                <button class="input-group-text col-4" @onclick="() => UpdatePlannedAtFilter(DateTime.Today)" data-search-step-4>@Loc["Planned"]</button>
                <div data-search-step-5>
                <InputSelect class="form-control w-auto flex-grow-0" Value="SearchFilterService.PlannedAtCompare" ValueExpression="() => SearchFilterService.PlannedAtCompare" TValue="DateCompare" ValueChanged="UpdatePlannedAtCompare">
                    <option value="@DateCompare.Before">@("<")</option>
                    <option value="@DateCompare.On">@("=")</option>
                    <option value="@DateCompare.After">@(">")</option>
                    <option value="@DateCompare.NotOn">@("≠")</option>
                </InputSelect>
                </div>
                <InputDate class="form-control" Value="SearchFilterService.PlannedAtFilter" ValueExpression="() => SearchFilterService.PlannedAtFilter" TValue="DateTime?" ValueChanged="UpdatePlannedAtFilter" Type="InputDateType.Date" @attributes="dataSearchStep6" />
                <button class="btn btn-outline-primary" @onclick="() => UpdatePlannedAtFilter(null)" data-search-step-7><i class="bi bi-x-square"></i></button>
            </div>

            <div class="input-group flex-nowrap">
                <button class="input-group-text col-4" @onclick="() => UpdateDoneAtFilter(DateTime.Today)" data-search-step-8>@Loc["Done"]</button>
                <div data-search-step-9>
                <InputSelect class="form-control w-auto flex-grow-0" Value="SearchFilterService.DoneAtCompare" ValueExpression="() => SearchFilterService.DoneAtCompare" TValue="DateCompare" ValueChanged="UpdateDoneAtCompare">
                    <option value="@DateCompare.Before">@("<")</option>
                    <option value="@DateCompare.On">@("=")</option>
                    <option value="@DateCompare.After">@(">")</option>
                    <option value="@DateCompare.NotOn">@("≠")</option>
                </InputSelect>
                </div>
                <InputDate class="form-control" Value="SearchFilterService.DoneAtFilter" ValueExpression="() => SearchFilterService.DoneAtFilter" TValue="DateTime?" ValueChanged="UpdateDoneAtFilter" Type="InputDateType.Date" @attributes="dataSearchStep10" />
                <button class="btn btn-outline-primary" @onclick="() => UpdateDoneAtFilter(null)" data-search-step-11><i class="bi bi-x-square"></i></button>
            </div>
            }

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.FilterByCategory)"><i class="bi bi-filter"></i> @Loc["Filter by category"]<i class="@($"bi {GetFoldIcon(QuerySection.FilterByCategory)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.FilterByCategory])
            {
            <div class="list-group-item" data-search-step-12>
                <CheckBox IsTriState="true" Checked="ShowAllCategories" CheckedChanged="(bool? show) => SetShowAllCategories()">
                    <span>@Loc["Categories"]:</span>
                </CheckBox>

                <div class="mt-3" />

                @foreach (CategoryModel category in CategoryService.Categories)
                {
                    bool isSelected = !_settings.HiddenCategoryIds.Contains(category.Id);

                    <div class="form-check position-relative">
                        <InputCheckbox id="@($"category-{category.Id}")" class="form-check-input me-1" Value="isSelected" ValueExpression="() => isSelected" ValueChanged="(bool show) => SaveCategoryIds(category.Id, show)" />
                        <label for="@($"category-{category.Id}")" class="form-check-label stretched-link d-inline">@category.Title</label>
                    </div>
                }
            </div>
            }

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.FilterByPriority)"><i class="bi bi-filter"></i> @Loc["Filter by priority"]<i class="@($"bi {GetFoldIcon(QuerySection.FilterByPriority)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.FilterByPriority])
            {
            <div class="list-group-item" data-search-step-13>
                <CheckBox IsTriState="true" Checked="ShowAllPriorities" CheckedChanged="(bool? show) => SetShowAllPriorities()">
                    <span>@Loc["Priorities"]:</span>
                </CheckBox>

                <div class="form-check position-relative mt-3">
                    <InputCheckbox id="Priority.None" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.None]" ValueExpression="() => _settings.ShowPriority[Priority.None]" ValueChanged="(bool show) => SaveShowPriority(Priority.None, show)" />
                    <label for="Priority.None" class="form-check-label stretched-link d-inline">⊘ @Loc["None"]</label>
                </div>
                <div class="form-check position-relative">
                    <InputCheckbox id="Priority.VeryLow" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.VeryLow]" ValueExpression="() => _settings.ShowPriority[Priority.VeryLow]" ValueChanged="(bool show) => SaveShowPriority(Priority.VeryLow, show)" />
                    <label for="Priority.VeryLow" class="form-check-label stretched-link d-inline">︾ @Loc["Very low"]</label>
                </div>
                <div class="form-check position-relative">
                    <InputCheckbox id="Priority.Low" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.Low]" ValueExpression="() => _settings.ShowPriority[Priority.Low]" ValueChanged="(bool show) => SaveShowPriority(Priority.Low, show)" />
                    <label for="Priority.Low" class="form-check-label stretched-link d-inline">﹀ @Loc["Low"]</label>
                </div>
                <div class="form-check position-relative">
                    <InputCheckbox id="Priority.Medium" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.Medium]" ValueExpression="() => _settings.ShowPriority[Priority.Medium]" ValueChanged="(bool show) => SaveShowPriority(Priority.Medium, show)" />
                    <label for="Priority.Medium" class="form-check-label stretched-link d-inline">— @Loc["Medium"]</label>
                </div>
                <div class="form-check position-relative">
                    <InputCheckbox id="Priority.High" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.High]" ValueExpression="() => _settings.ShowPriority[Priority.High]" ValueChanged="(bool show) => SaveShowPriority(Priority.High, show)" />
                    <label for="Priority.High" class="form-check-label stretched-link d-inline">︿ @Loc["High"]</label>
                </div>
                <div class="form-check position-relative">
                    <InputCheckbox id="Priority.VeryHigh" class="form-check-input me-1" Value="_settings.ShowPriority[Priority.VeryHigh]" ValueExpression="() => _settings.ShowPriority[Priority.VeryHigh]" ValueChanged="(bool show) => SaveShowPriority(Priority.VeryHigh, show)" />
                    <label for="Priority.VeryHigh" class="form-check-label stretched-link d-inline">︽ @Loc["Very high"]</label>
                </div>
            </div>
            }

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.FilterByStatus)"><i class="bi bi-filter"></i> @Loc["Filter by status"]<i class="@($"bi {GetFoldIcon(QuerySection.FilterByStatus)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.FilterByStatus])
            {
            <div class="list-group-item">
                <div class="position-relative" data-search-step-14>
                    <InputCheckbox id="HideCompletedTasks" class="form-check-input me-1" Value="_settings.HideCompletedTasks" ValueExpression="() => _settings.HideCompletedTasks" ValueChanged="SaveHideCompletedTasks" />
                    <label for="HideCompletedTasks" class="form-check-label stretched-link d-inline">@Loc["Hide completed tasks"]</label>
                </div>
            </div>

            <div class="list-group-item">
                <small>@Loc["Habit interval ratio"]:</small>
                <div data-search-step-15>
                <InputSelect class="form-select" Value="_settings.SelectedRatio" ValueExpression="() => _settings.SelectedRatio" TValue="Ratio" ValueChanged="SaveSelectedRatio">
                    <option value="@Ratio.ElapsedToAverage">@Loc["Elapsed time to average interval"]</option>
                    <option value="@Ratio.ElapsedToDesired">@Loc["Elapsed time to repeat interval"]</option>
                    <option value="@Ratio.AverageToDesired">@Loc["Average interval to repeat interval"]</option>
                </InputSelect>
                </div>
                <div class="position-relative mt-2" data-search-step-16>
                    <InputCheckbox id="ShowItemList" class="form-check-input me-1" Value="_settings.ShowOnlyOverSelectedRatioMin" ValueExpression="() => _settings.ShowOnlyOverSelectedRatioMin" ValueChanged="SaveShowOnlyOverSelectedRatioMin" />
                    <label for="ShowItemList" class="form-check-label stretched-link d-inline">@Loc["Show only habits with interval ratio over"] @_settings.SelectedRatioMin%</label>
                </div>

                <input type="range" class="form-range d-block" value="@_settings.SelectedRatioMin" @oninput="(ChangeEventArgs args) => SaveSelectedRatioMin(Convert.ToInt32(args.Value))" data-search-step-17 />
            </div>
            }

            <small class="mx-1 my-2" @onclick="() => ToggleFoldSection(QuerySection.Sort)"><i class="bi bi-arrow-down-up"></i> @Loc["Sort"]<i class="@($"bi {GetFoldIcon(QuerySection.Sort)} mx-1")"></i></small>

            @if (!_settings.FoldSection[QuerySection.Sort])
            {
            <div class="list-group-item" data-search-step-18>
                <small><i class="bi bi-sticky"></i> @Loc["Notes"]:</small>
                <InputSelect class="form-select" Value="_settings.SortBy[ContentType.Note]" ValueExpression="() => _settings.SortBy[ContentType.Note]" ValueChanged="(Sort sort) => SaveSort(ContentType.Note, sort)">
                    <option value="@Sort.Category">@Loc["Category"]</option>
                    <option value="@Sort.Priority">@Loc["Priority"]</option>
                    <option value="@Sort.Title">@Loc["Title"]</option>
                </InputSelect>
            </div>

            <div class="list-group-item" data-search-step-19>
                <small><i class="bi bi-list-task"></i> @Loc["Tasks"]:</small>
                <InputSelect class="form-select" Value="_settings.SortBy[ContentType.Task]" ValueExpression="() => _settings.SortBy[ContentType.Task]" ValueChanged="(Sort sort) => SaveSort(ContentType.Task, sort)">
                    <option value="@Sort.Category">@Loc["Category"]</option>
                    <option value="@Sort.Priority">@Loc["Priority"]</option>
                    <option value="@Sort.Title">@Loc["Title"]</option>
                    <option value="@Sort.Duration">@Loc["Duration"]</option>
                    <option value="@Sort.ElapsedTime">@Loc["Elapsed time"]</option>
                    <option value="@Sort.PlannedAt">@Loc["Planned at"]</option>
                    <option value="@Sort.TimeSpent">@Loc["Time spent"]</option>
                </InputSelect>
            </div>

            <div class="list-group-item" data-search-step-20>
                <small><i class="bi bi-repeat"></i> @Loc["Habits"]:</small>
                <InputSelect class="form-select" Value="_settings.SortBy[ContentType.Habit]" ValueExpression="() => _settings.SortBy[ContentType.Habit]" ValueChanged="(Sort sort) => SaveSort(ContentType.Habit, sort)">
                    <option value="@Sort.Category">@Loc["Category"]</option>
                    <option value="@Sort.Priority">@Loc["Priority"]</option>
                    <option value="@Sort.Title">@Loc["Title"]</option>
                    <option value="@Sort.Duration">@Loc["Duration"]</option>
                    <option value="@Sort.RepeatInterval">@Loc["Repeat interval"]</option>
                    <option value="@Sort.AverageInterval">@Loc["Average interval"]</option>
                    <option value="@Sort.TimeSpent">@Loc["Time spent"]</option>
                    <option value="@Sort.AverageTimeSpent">@Loc["Average time spent"]</option>
                    <option value="@Sort.ElapsedTime">@Loc["Elapsed time"]</option>
                    <option value="@Sort.SelectedRatio">@Loc["Selected interval ratio"]</option>
                </InputSelect>
            </div>
            }
        </div>
    }
</div>

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="search" TourSteps="tourSteps" />
}

@code {
    TourStep[] tourSteps =
    {
        new() { Text = "Search titles and content in Notes, Tasks, and Habits." },
        new() { Text = "Match case when searching." },
        new() { Text = "Clear the search field." },
        new() { Text = "Click here to enter today's date." },
        new() { Text = "Choose how to compare the planned date (<, =, >, ≠)." },
        new() { Text = "Filter by planned date." },
        new() { Text = "Clear the planned date filter." },
        new() { Text = "Click here to enter today's date." },
        new() { Text = "Choose how to compare the done date (<, =, >, ≠)." },
        new() { Text = "Filter by done date." },
        new() { Text = "Clear the done date filter." },
        new() { Text = "Filter by categories." },
        new() { Text = "Filter by priorities." },
        new() { Text = "Hide completed tasks." },
        new() { Text = "Choose which Habit interval ratio to display next to the Habit title." },
        new() { Text = "Show only habits with interval ratio over the chosen limit." },
        new() { Text = "Choose the limit." },
        new() { Text = "Choose how to sort Notes." },
        new() { Text = "Choose how to sort Tasks." },
        new() { Text = "Choose how to sort Habits." },
    };

    private readonly Dictionary<string, object> dataSearchStep1 = new() { ["data-search-step-1"] = "" };
    private readonly Dictionary<string, object> dataSearchStep6 = new() { ["data-search-step-6"] = "" };
    private readonly Dictionary<string, object> dataSearchStep10 = new() { ["data-search-step-10"] = "" };

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    SettingsModel _settings => ClientState.Settings;

    bool? ShowAllCategories => GetShowAllCategories();

    bool? GetShowAllCategories()
    {
        if (_settings.HiddenCategoryIds.Count == 0)
            return true;

        if (_settings.HiddenCategoryIds.Count == CategoryService.Categories?.Count)
            return false;

        return null;
    }

    bool? ShowAllPriorities => GetShowAllPriorities();

    bool? GetShowAllPriorities()
    {
        if (_settings.ShowPriority.Values.All(x => x))
            return true;

        if (!_settings.ShowPriority.Values.Any(x => x))
            return false;

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.Initialize();
    }

    async Task UpdateStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task UpdateSettings()
    {
        await ClientState.UpdateSettings();

        await UpdateStateChanged();
    }

    async Task UpdateSearchTerm(string? searchTerm)
    {
        SearchFilterService.SearchTerm = searchTerm;
        await UpdateStateChanged();
    }

    async Task UpdateMatchCase(bool matchCase)
    {
        SearchFilterService.MatchCase = matchCase;
        await UpdateStateChanged();
    }

    async Task UpdatePlannedAtCompare(DateCompare plannedAtCompare)
    {
        SearchFilterService.PlannedAtCompare = plannedAtCompare;
        await UpdateStateChanged();
    }

    async Task UpdatePlannedAtFilter(DateTime? plannedAtFilter)
    {
        SearchFilterService.PlannedAtFilter = plannedAtFilter;
        await UpdateStateChanged();
    }

    async Task UpdateDoneAtCompare(DateCompare doneAtCompare)
    {
        SearchFilterService.DoneAtCompare = doneAtCompare;
        await UpdateStateChanged();
    }

    async Task UpdateDoneAtFilter(DateTime? doneAtFilter)
    {
        SearchFilterService.DoneAtFilter = doneAtFilter;
        await UpdateStateChanged();
    }

    async Task SaveCategoryIds(long categoryId, bool show)
    {
        if (!show && !_settings.HiddenCategoryIds.Contains(categoryId))
        {
            _settings.HiddenCategoryIds.Add(categoryId);
            await UpdateSettings();
        }

        if (show && _settings.HiddenCategoryIds.Contains(categoryId))
        {
            _settings.HiddenCategoryIds.Remove(categoryId);
            await UpdateSettings();
        }
    }

    async Task SetShowAllCategories()
    {
        if (_settings.HiddenCategoryIds.Count == 0)
        {
            if (CategoryService.Categories is not null)
                _settings.HiddenCategoryIds = CategoryService.Categories.Select(x => x.Id).ToList();
            await UpdateSettings();
        }
        else // if (_settings.HiddenCategoryIds.Count == CategoryService.Categories.Count)
        {
            _settings.HiddenCategoryIds.Clear();
            await UpdateSettings();
        }
    }

    async Task SetShowAllPriorities()
    {
        if (_settings.ShowPriority.Values.All(x => x))
        {
            _settings.ShowPriority.Keys.ToList().ForEach(key => _settings.ShowPriority[key] = false);
            await UpdateSettings();
        }
        else // if (!_settings.ShowPriority.Values.Any(x => x))
        {
            _settings.ShowPriority.Keys.ToList().ForEach(key => _settings.ShowPriority[key] = true);
            await UpdateSettings();
        }
    }

    async Task SaveSelectedRatio(Ratio ratio)
    {
        _settings.SelectedRatio = ratio;

        await UpdateSettings();
    }

    async Task SaveHideCompletedTasks(bool show)
    {
        _settings.HideCompletedTasks = show;

        await UpdateSettings();
    }

    async Task SaveShowOnlyOverSelectedRatioMin(bool show)
    {
        _settings.ShowOnlyOverSelectedRatioMin = show;

        await UpdateSettings();
    }

    async Task SaveSelectedRatioMin(int min)
    {
        _settings.SelectedRatioMin = min;

        await UpdateSettings();
    }

    async Task SaveShowPriority(Priority priority, bool show)
    {
        _settings.ShowPriority[priority] = show;

        await UpdateSettings();
    }

    string GetFoldIcon(QuerySection querySection)
    {
        return _settings.FoldSection[querySection] ? "bi-chevron-right" : "bi-chevron-down";
    }

    async Task ToggleFoldSection(QuerySection querySection)
    {
        _settings.FoldSection[querySection] = !_settings.FoldSection[querySection];

        await UpdateSettings();
    }

    async Task SaveSort(ContentType contentType, Sort sort)
    {
        _settings.SortBy[contentType] = sort;

        await UpdateSettings();
    }
}

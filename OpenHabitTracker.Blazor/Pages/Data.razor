@page "/data"

@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Blazor
@using OpenHabitTracker.Services

@inject ClientState ClientState
@inject IStringLocalizer Loc
@inject IAuthFragment AuthFragment
@inject IGTourService GTourService

@* <PageTitle>OpenHabitTracker - Data</PageTitle> *@

<div>
    <div class="my-1">

        <div class="list-group">
            <button class="list-group-item list-group-item-action" @onclick="LoadExamples" data-data-step-1><i class="bi bi-download"></i> @Loc["Load examples"]</button>
            <button class="list-group-item list-group-item-action" @onclick="DeleteAllData" data-data-step-2><i class="bi bi-trash"></i> @Loc["Delete all data"]</button>
        </div>

    </div>
</div>

<Backup StateChanged=StateChanged StateChangedChanged=StateChangedChanged />

@AuthFragment.GetAuthFragment(StateChanged, StateChangedChanged)

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="data" TourSteps="tourSteps" />
}

@code {
    string[] tourSteps =
    {
        "Load examples",
        "Delete all data",
        "Export JSON",
        "Export TSV",
        "Export YAML",
        "Export Markdown",
        "JSON (.json)",
        "TSV (.tsv)",
        "YAML (.yaml)",
        "Markdown (.md)",
        "Google Keep (.zip)",
    };

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task LoadExamples()
    {
        await ClientState.AddExamples();

        await OnStateChanged();
    }

    async Task DeleteAllData()
    {
        await ClientState.DeleteAllData();

        await OnStateChanged();
    }
}

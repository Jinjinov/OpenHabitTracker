@page "/data"

@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Blazor
@using OpenHabitTracker.Services

@inject ClientState ClientState
@inject IStringLocalizer Loc
@inject ILinkAttributeService LinkAttributeService
@inject IAuthFragment AuthFragment
@inject IGTourService GTourService

@* <PageTitle>OpenHabitTracker - Data</PageTitle> *@

<div>
    <div class="my-1">

        <div class="list-group">
            <button class="list-group-item list-group-item-action" @onclick="LoadExamples" data-data-step-1><i class="bi bi-download"></i> @Loc["Load examples"]</button>
            <button class="list-group-item list-group-item-action" @onclick="DeleteAllData" data-data-step-2><i class="bi bi-trash"></i> @Loc["Delete all data"]</button>
        </div>

    </div>
</div>

<Backup StateChanged=StateChanged StateChangedChanged=StateChangedChanged />

@if (AuthFragment.IsAuthAvailable)
{
    <div data-data-step-12>
        @AuthFragment.GetAuthFragment(StateChanged, StateChangedChanged)
    </div>

    <div @ref="WrapperElement" data-data-step-13>
        @Loc["To enable online sync, run"] <a href="https://hub.docker.com/r/jinjinov/openhabittracker">OpenHabitTracker Docker</a> @Loc["image on your server"]
    </div>
}

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="data" TourSteps="tourSteps" />
}

@code {
    TourStep[] tourSteps;

    public Data()
    {
        tourSteps = new TourStep[]
        {
            new() { Text = "Load example Categories, Notes, Tasks, and Habits." },
            new() { Text = "Delete all Categories, Notes, Tasks, Habits, and Settings." },
            new() { Text = "Export Categories, Notes, Tasks, Habits, and Settings to a JSON file." },
            new() { Text = "Export Categories, Notes, Tasks, and Habits to a TSV file." },
            new() { Text = "Export Categories, Notes, Tasks, Habits, and Settings to a YAML file." },
            new() { Text = "Export Categories, Notes, Tasks, and Habits to a Markdown file." },
            new() { Text = "Import Categories, Notes, Tasks, Habits, and Settings from a JSON file." },
            new() { Text = "Import Categories, Notes, Tasks, and Habits from a TSV file." },
            new() { Text = "Import Categories, Notes, Tasks, Habits, and Settings from a YAML file." },
            new() { Text = "Import Categories, Notes, Tasks, and Habits from a Markdown file." },
            new() { Text = "Import Google Keep notes from a ZIP file exported from Google Takeout." },
            new() { Text = "Use the address, username and password of your OpenHabitTracker Docker container to log in.", Show = () => AuthFragment.IsAuthAvailable },
            new() { Text = "Download OpenHabitTracker Docker image and run it on your server to enable online sync.", Show = () => AuthFragment.IsAuthAvailable },
        };
    }

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    private ElementReference WrapperElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LinkAttributeService.AddAttributesToLinks(WrapperElement);
        }
    }

    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task LoadExamples()
    {
        await ClientState.AddExamples();

        await OnStateChanged();
    }

    async Task DeleteAllData()
    {
        await ClientState.DeleteAllData();

        await OnStateChanged();
    }
}

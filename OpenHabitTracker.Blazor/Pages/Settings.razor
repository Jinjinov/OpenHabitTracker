@page "/settings"

@using GTour.Abstractions
@using OpenHabitTracker.App
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject ClientState ClientState
@inject JsInterop JsInterop
@inject IStringLocalizer Loc
@inject IGTourService GTourService

@* <PageTitle>OpenHabitTracker - Settings</PageTitle> *@

<div>
    <div class="my-1 list-group">

        <div class="list-group-item" data-settings-step-1>
            <InputCheckbox id="IsDarkMode" class="form-check-input me-1" Value="_settings.IsDarkMode" ValueExpression="() => _settings.IsDarkMode" ValueChanged="SaveIsDarkMode" />
            <label for="IsDarkMode" class="form-check-label stretched-link">@Loc["Dark mode"]</label>
        </div>

        <div class="list-group-item" data-settings-step-2>
            <small>@Loc["Theme"]:</small>
            <InputSelect class="form-select" Value="_settings.Theme" ValueExpression="() => _settings.Theme" TValue="string" ValueChanged="SaveTheme">
                <option value="default">default</option>
                <option value="cerulean">cerulean</option>
                <option value="cosmo">cosmo</option>
                <option value="cyborg">cyborg</option>
                <option value="darkly">darkly</option>
                <option value="flatly">flatly</option>
                <option value="journal">journal</option>
                <option value="litera">litera</option>
                <option value="lumen">lumen</option>
                <option value="lux">lux</option>
                <option value="materia">materia</option>
                <option value="minty">minty</option>
                <option value="morph">morph</option>
                <option value="pulse">pulse</option>
                <option value="quartz">quartz</option>
                <option value="sandstone">sandstone</option>
                <option value="simplex">simplex</option>
                <option value="sketchy">sketchy</option>
                <option value="slate">slate</option>
                <option value="solar">solar</option>
                <option value="spacelab">spacelab</option>
                <option value="superhero">superhero</option>
                <option value="united">united</option>
                <option value="vapor">vapor</option>
                <option value="yeti">yeti</option>
                <option value="zephyr">zephyr</option>
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-3>
            <small>@Loc["Start page"]:</small>
            <InputSelect class="form-select" Value="_settings.StartPage" ValueExpression="() => _settings.StartPage" TValue="string" ValueChanged="SaveStartPage">
                @if (WindowDimensions?.Width >= 1280 || WindowDimensions?.Width < 768)
                {
                    <option value="">@Loc["Home"]</option>
                }
                <option value="/notes">@Loc["Notes"]</option>
                <option value="/tasks">@Loc["Tasks"]</option>
                <option value="/habits">@Loc["Habits"]</option>
                <option value="/help">@Loc["Help"]</option>
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-4>
            <small>@Loc["Start sidebar"]:</small>
            <InputSelect class="form-select" Value="_settings.StartSidebar" ValueExpression="() => _settings.StartSidebar" TValue="string" ValueChanged="SaveStartSidebar">
                <option value="">@Loc["None"]</option>
                <option value="Menu">@Loc["Menu"]</option>
                <option value="Trash">@Loc["Trash"]</option>
                <option value="Search">@Loc["Search, Filter, Sort"]</option>
                <option value="Settings">@Loc["Settings"]</option>
                <option value="Categories">@Loc["Categories"]</option>
                @* <option value="Priorities">@Loc["Priorities"]</option> *@
                @* <option value="Backup">@Loc["Backup"]</option> *@
                <option value="Data">@Loc["Data"]</option>
                <option value="About">@Loc["About"]</option>
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-5>
            <InputCheckbox id="ShowHelp" class="form-check-input me-1" Value="_settings.ShowHelp" ValueExpression="() => _settings.ShowHelp" ValueChanged="SaveShowHelp" />
            <label for="ShowHelp" class="form-check-label stretched-link d-inline">@Loc["Show help"]</label>
        </div>

        <div class="list-group-item" data-settings-step-6>
            <InputCheckbox id="ShowItemList" class="form-check-input me-1" Value="_settings.ShowItemList" ValueExpression="() => _settings.ShowItemList" ValueChanged="SaveShowItemList" />
            <label for="ShowItemList" class="form-check-label stretched-link d-inline">@Loc["Show item list"]</label>
        </div>

        <div class="list-group-item" data-settings-step-7>
            <InputCheckbox id="ShowSmallCalendar" class="form-check-input me-1" Value="_settings.ShowSmallCalendar" ValueExpression="() => _settings.ShowSmallCalendar" ValueChanged="SaveShowSmallCalendar" />
            <label for="ShowSmallCalendar" class="form-check-label stretched-link d-inline">@Loc["Show small calendar"]</label>
        </div>

        <div class="list-group-item" data-settings-step-8>
            <InputCheckbox id="ShowLargeCalendar" class="form-check-input me-1" Value="_settings.ShowLargeCalendar" ValueExpression="() => _settings.ShowLargeCalendar" ValueChanged="SaveShowLargeCalendar" />
            <label for="ShowLargeCalendar" class="form-check-label stretched-link d-inline">@Loc["Show large calendar"]</label>
        </div>

        <div class="list-group-item" data-settings-step-9>
            <InputCheckbox id="ShowColor" class="form-check-input me-1" Value="_settings.ShowColor" ValueExpression="() => _settings.ShowColor" ValueChanged="SaveShowColor" />
            <label for="ShowColor" class="form-check-label stretched-link d-inline">@Loc["Show color"]</label>
        </div>

        <div class="list-group-item" data-settings-step-10>
            <InputCheckbox id="ShowCreatedUpdated" class="form-check-input me-1" Value="_settings.ShowCreatedUpdated" ValueExpression="() => _settings.ShowCreatedUpdated" ValueChanged="SaveShowCreatedUpdated" />
            <label for="ShowCreatedUpdated" class="form-check-label stretched-link d-inline">@Loc["Show created & updated"]</label>
        </div>

        <div class="list-group-item" data-settings-step-11>
            <small>@Loc["Language"]:</small>
            <InputSelect class="form-select" Value="_settings.Culture" ValueExpression="() => _settings.Culture" TValue="string" ValueChanged="SaveCulture">
                @foreach ((string key, Localization.Loc loc) in Localization.Loc.Cultures)
                {
                    <option value="@key">@loc.Language</option>
                }
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-12>
            <small>@Loc["Week start"]:</small>
            <InputSelect class="form-select" Value="_settings.FirstDayOfWeek" ValueExpression="() => _settings.FirstDayOfWeek" TValue="DayOfWeek" ValueChanged="SaveFirstDayOfWeek">
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues<DayOfWeek>())
                {
                    <option value="@dayOfWeek">@Loc[dayOfWeek.ToString()]</option>
                }
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-13>
            <InputCheckbox id="InsertTabsInNoteContent" class="form-check-input me-1" Value="_settings.InsertTabsInNoteContent" ValueExpression="() => _settings.InsertTabsInNoteContent" ValueChanged="SaveInsertTabsInNoteContent" />
            <label for="InsertTabsInNoteContent" class="form-check-label stretched-link d-inline">@Loc["Insert tabs in note content"]</label>
        </div>

        <div class="list-group-item" data-settings-step-14>
            <InputCheckbox id="DisplayNoteContentAsMarkdown" class="form-check-input me-1" Value="_settings.DisplayNoteContentAsMarkdown" ValueExpression="() => _settings.DisplayNoteContentAsMarkdown" ValueChanged="SaveDisplayNoteContentAsMarkdown" />
            <label for="DisplayNoteContentAsMarkdown" class="form-check-label stretched-link d-inline">@Loc["Display note content as Markdown"]</label>
        </div>

        <div class="list-group-item" data-settings-step-15>
            <InputCheckbox id="UncheckAllItemsOnHabitDone" class="form-check-input me-1" Value="_settings.UncheckAllItemsOnHabitDone" ValueExpression="() => _settings.UncheckAllItemsOnHabitDone" ValueChanged="SaveUncheckAllItemsOnHabitDone" />
            <label for="UncheckAllItemsOnHabitDone" class="form-check-label stretched-link d-inline">@Loc["Reset habit when it is completed"]</label>
        </div>

        <div class="list-group-item" data-settings-step-16>
            <small>@Loc["Horizontal space"]:</small>
            <InputSelect class="form-select" Value="_settings.HorizontalMargin" ValueExpression="() => _settings.HorizontalMargin" TValue="int" ValueChanged="SaveHorizontalMargin">
                @for (int i = 0; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </InputSelect>
        </div>

        <div class="list-group-item" data-settings-step-17>
            <small>@Loc["Vertical space"]:</small>
            <InputSelect class="form-select" Value="_settings.VerticalMargin" ValueExpression="() => _settings.VerticalMargin" TValue="int" ValueChanged="SaveVerticalMargin">
                @for (int i = 0; i <= 5; i++)
                {
                        <option value="@i">@i</option>
                }
            </InputSelect>
        </div>

    </div>
</div>

@if (ClientState.Settings.ShowHelp)
{
    <GuidedTourComponent TourId="settings" TourSteps="tourSteps" />
}

@code {
    TourStep[] tourSteps =
    {
        new() { Text = "Toggle dark mode." },
        new() { Text = "Choose a theme." },
        new() { Text = "Choose a start page that should open every time you start OpenHabitTracker." },
        new() { Text = "Choose a start sidebar that should open every time you start OpenHabitTracker." },
        new() { Text = "Show help on every page." },
        new() { Text = "Show the item list in Tasks and Habits." },
        new() { Text = "Show the small calendar in one line in Habits." },
        new() { Text = "Show the large calendar for the selected Habit." },
        new() { Text = "Show the color picker in Notes, Tasks and Habits." },
        new() { Text = "Show the created date and the updated date in Notes, Tasks and Habits." },
        new() { Text = "Choose a language." },
        new() { Text = "Choose the start of the week in the large calendar in Habits." },
        new() { Text = "Pressing the TAB key inserts a tab in the content when writing the text in Notes." },
        new() { Text = "You can use Markdown to format the content in Notes." },
        new() { Text = "Resetting the habit when it is completed will uncheck all items." },
        new() { Text = "Choose the horizontal space between items in the list." },
        new() { Text = "Choose the vertical space between items in the list." },
    };

    private async Task StartTour(string tourId)
    {
        await GTourService.StartTour(tourId);
    }

    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    [Parameter]
    public Dimensions? WindowDimensions { get; set; }

    SettingsModel _settings => ClientState.Settings;

    async Task UpdateAndRefresh()
    {
        await ClientState.UpdateSettings();

        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task SaveIsDarkMode(bool isDarkMode)
    {
        if (_settings.IsDarkMode != isDarkMode)
        {
            string mode = isDarkMode ? "dark" : "light";
            await JsInterop.SetMode(mode);
        }

        _settings.IsDarkMode = isDarkMode;

        await ClientState.UpdateSettings();
    }

    async Task SaveTheme(string theme)
    {
        if (_settings.Theme != theme)
        {
            await JsInterop.SetTheme(theme);
        }

        _settings.Theme = theme;

        await ClientState.UpdateSettings();
    }

    async Task SaveStartPage(string startPage)
    {
        _settings.StartPage = startPage;

        await ClientState.UpdateSettings();
    }

    async Task SaveStartSidebar(string startSidebar)
    {
        _settings.StartSidebar = startSidebar;

        await ClientState.UpdateSettings();
    }

    async Task SaveShowHelp(bool show)
    {
        _settings.ShowHelp = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowItemList(bool show)
    {
        _settings.ShowItemList = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowSmallCalendar(bool show)
    {
        _settings.ShowSmallCalendar = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowLargeCalendar(bool show)
    {
        _settings.ShowLargeCalendar = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowColor(bool show)
    {
        _settings.ShowColor = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowCreatedUpdated(bool show)
    {
        _settings.ShowCreatedUpdated = show;

        await UpdateAndRefresh();
    }

    async Task SaveCulture(string culture)
    {
        _settings.Culture = culture;

        Localization.Loc.SetCulture(culture);

        await UpdateAndRefresh();
    }

    async Task SaveFirstDayOfWeek(DayOfWeek dayOfWeek)
    {
        _settings.FirstDayOfWeek = dayOfWeek;

        await UpdateAndRefresh();
    }

    async Task SaveInsertTabsInNoteContent(bool val)
    {
        _settings.InsertTabsInNoteContent = val;

        await UpdateAndRefresh();
    }

    async Task SaveDisplayNoteContentAsMarkdown(bool val)
    {
        _settings.DisplayNoteContentAsMarkdown = val;

        await UpdateAndRefresh();
    }

    async Task SaveUncheckAllItemsOnHabitDone(bool val)
    {
        _settings.UncheckAllItemsOnHabitDone = val;

        await UpdateAndRefresh();
    }

    async Task SaveHorizontalMargin(int horizontalMargin)
    {
        _settings.HorizontalMargin = horizontalMargin;

        await UpdateAndRefresh();
    }

    async Task SaveVerticalMargin(int verticalMargin)
    {
        _settings.VerticalMargin = verticalMargin;

        await UpdateAndRefresh();
    }
}

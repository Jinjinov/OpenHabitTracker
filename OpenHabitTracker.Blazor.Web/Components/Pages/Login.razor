@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using OpenHabitTracker.Blazor.Web.Data

@attribute [ExcludeFromInteractiveRouting]

@layout LoginLayout

@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>OpenHabitTracker</PageTitle>

<div class="text-center mb-4">
    <h3><a href="https://openhabittracker.net" class="text-decoration-none text-reset"><span class="" style="font-family: 'Caveat', cursive; font-size: 1.5em;">OpenHabitTracker</span></a></h3>
</div>

<div class="mb-3">
    <a href="https://pwa.openhabittracker.net" class="btn btn-primary w-100">Use the Progressive web app</a>
    <small>* Data is stored on your device</small>
</div>

<div class="mb-3">
    <a href="https://hub.docker.com/r/jinjinov/openhabittracker" class="btn btn-primary w-100">Get the Docker image</a>
    <small>* Data is stored on your server</small>
</div>

<hr />

<EditForm FormName="login" Model="@Input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="Input.Username" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="Input.Password" type="password" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Log in</button>

    @if (!string.IsNullOrEmpty(loginErrorMessage))
    {
        <div class="alert alert-danger mt-3">
            @loginErrorMessage
        </div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string loginErrorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        SignInResult result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, isPersistent: true, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            loginErrorMessage = "Invalid username or password. Please try again.";

            if (result.IsLockedOut)
            {
                loginErrorMessage = "Your account is locked. Please try again later.";
            }
            else if (result.RequiresTwoFactor)
            {
                loginErrorMessage = "Two-factor authentication is required.";
            }
        }
    }

    public class InputModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
